<DataTemplate xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">
    <DataTemplate.Resources>
        <SolidColorBrush x:Key="NormalTextColor" Color="Black" />
        <SolidColorBrush x:Key="NormalBorderBrush" Color="Black" />
        <SolidColorBrush x:Key="DefaultedBorderBrush" Color="Black" />

        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#000888" />

        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#000EEE" />

        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#000AAA" />

        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Grid>
                                <Rectangle Margin="2"
								           Stroke="#60000000"
								           StrokeDashArray="1 2"
								           StrokeThickness="1" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <LinearGradientBrush x:Key="CloseNormal" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Offset="0.0" Color="#FF4452" />
            <GradientStop Offset="1.0" Color="#AA3e4a" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="CloseOver" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Offset="0.0" Color="#FF5a6b" />
            <GradientStop Offset="1.0" Color="#FF4f5d" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ClosePressed" Color="#FF0909" />


        <Style x:Key="CloseButton" TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
            <Setter Property="MinHeight" Value="16" />
            <Setter Property="MinWidth" Value="16" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border x:Name="Border"
							        Background="{StaticResource CloseNormal}"
							        BorderBrush="{StaticResource NormalBorderBrush}"
							        BorderThickness="0"
							        ClipToBounds="False"
							        CornerRadius="7">
                                <TextBlock Margin="0"
								           VerticalAlignment="Center"
								           HorizontalAlignment="Center"
								           FontFamily="Segoe Script"
								           FontSize="14"
								           FontWeight="Bold"
								           Foreground="White"
								           Text="X"
								           TextAlignment="Center" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource CloseOver}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource ClosePressed}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  HINT: Collapse animation need for smooth moving of notifications, Duration defines speed of moving  -->
        <Storyboard x:Key="CollapseStoryboard">
            <DoubleAnimation Duration="0:0:0.1"
			                 From="100"
			                 Storyboard.TargetProperty="Height"
			                 To="0" />
            <!--  HINT: Dirty solution to notify viewModel about collapse:  -->
            <PointAnimationUsingKeyFrames Storyboard.TargetProperty="DataContext.Close.EndPoint">
                <EasingPointKeyFrame KeyTime="0:0:0.1" Value="1,1" />
            </PointAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="FadeInWaitFadeOutStoryboard">
            <DoubleAnimation Duration="0:0:1"
			                 From="0.01"
			                 Storyboard.TargetName="NotificationVisualRoot"
			                 Storyboard.TargetProperty="Opacity"
			                 To="1" />

            <!--  HINT: BeginTimeBelow defines how long notification need to stay visible before fadeout  -->
            <!--  HINT: And Duration below defines fadeout time  -->
            <DoubleAnimation BeginTime="99.23:0:5"
			                 Duration="0:0:5"
			                 From="1"
			                 Storyboard.TargetName="NotificationVisualRoot"
			                 Storyboard.TargetProperty="Opacity"
			                 To="0" />
            <DoubleAnimation BeginTime="99.23:0:11"
			                 Duration="0:0:0.5"
			                 From="0.8"
			                 Storyboard.TargetName="NotificationVisualRoot"
			                 Storyboard.TargetProperty="Opacity"
			                 To="0" />
        </Storyboard>
    </DataTemplate.Resources>

    <!--  HINT: Notification must have root visual element with binded to ViewModel property "Id" tag, it's used to remove notifications  -->
    <Grid x:Name="NotificationVisualRoot">
        <Grid Name="UserDefinedVisualPart" Width="300">
            <Border Name="border"
		        Margin="10"
		        Background="#77FF77"
		        BorderThickness="0"
		        CornerRadius="10">
                <Border.Effect>
                    <DropShadowEffect BlurRadius="10"
				                  Opacity="0.8"
				                  ShadowDepth="0" />
                </Border.Effect>

                <Grid Margin="6">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Margin="2,4,4,2"
				           VerticalAlignment="Center"
				           FontFamily="Arial"
				           FontSize="14"
				           FontWeight="Bold"
				           Foreground="#0505F5"
				           Text="{Binding Path=Title}"
				           TextOptions.TextFormattingMode="Display"
				           TextOptions.TextRenderingMode="ClearType"
				           TextTrimming="CharacterEllipsis"
				           TextWrapping="Wrap" />

                    <!--  HINT: button's command is binded to VM command  -->
                    <Button Grid.Column="1"
				        Width="30"
				        Height="30"
				        Margin="0,0,12,0"
				        HorizontalAlignment="Right"
				        Command="{Binding UserCommand}"
				        CommandParameter="0"
				        Content="X"
				        Style="{StaticResource CloseButton}" />
                    <TextBlock Grid.Row="1"
				           Margin="2,2,4,4"
				           VerticalAlignment="Center"
				           FontFamily="Arial"
				           Foreground="Black"
				           Text="{Binding Path=Message}"
				           TextOptions.TextFormattingMode="Display"
				           TextOptions.TextRenderingMode="ClearType"
				           TextTrimming="CharacterEllipsis"
				           TextWrapping="Wrap" />
                    <TextBlock Grid.Row="3"
				           Margin="2,2,4,4"
				           VerticalAlignment="Center"
				           FontFamily="Arial"
				           FontSize="9"
				           Foreground="Blue"
				           Text="{Binding Path=Footer}"
				           TextOptions.TextFormattingMode="Display"
				           TextOptions.TextRenderingMode="ClearType"
				           TextTrimming="CharacterEllipsis"
				           TextWrapping="Wrap" />
                </Grid>
            </Border>
        </Grid>
        <Grid Name="DeactivationPart" Background="#01FFFFFF" Opacity="0.01"  Visibility="Hidden"/>
    </Grid>


    <DataTemplate.Triggers>
        <EventTrigger RoutedEvent="Loaded" SourceName="NotificationVisualRoot">
            <BeginStoryboard x:Name="PlayFadeInWaitFadeOutStoryboard" Storyboard="{StaticResource FadeInWaitFadeOutStoryboard}" />
        </EventTrigger>

        <!--  HINT: Mouse over prevent notification from fadeout  -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=UserDefinedVisualPart, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding ElementName=DeactivationPart, Path=Visibility}" Value="Hidden" />
                <Condition Binding="{Binding Path=IsCloseNeeded}" Value="False" />
            </MultiDataTrigger.Conditions>
            <MultiDataTrigger.EnterActions>
                <SeekStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" Offset="0:0:1" />
                <PauseStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" />
            </MultiDataTrigger.EnterActions>
            <MultiDataTrigger.ExitActions>
                <SeekStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" Offset="0:0:5" />
                <ResumeStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" />
            </MultiDataTrigger.ExitActions>
        </MultiDataTrigger>


        <!--  When root bisual element became fully transparent, it must be collapsed  -->
        <Trigger SourceName="NotificationVisualRoot" Property="Opacity" Value="0">
            <Trigger.EnterActions>
                <PauseStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" />
                <BeginStoryboard Storyboard="{StaticResource CollapseStoryboard}" />
            </Trigger.EnterActions>
        </Trigger>


        <!--  If close needed from VM - have to seek animation beyond the normal fade out -->
        <DataTrigger Binding="{Binding Path=IsCloseNeeded}" Value="True">
            <Setter TargetName="DeactivationPart" Property="Visibility" Value="Visible" />
            <DataTrigger.EnterActions>
                <SeekStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard"  Offset="99.23:0:11.001" />
                <ResumeStoryboard BeginStoryboardName="PlayFadeInWaitFadeOutStoryboard" />
            </DataTrigger.EnterActions>
        </DataTrigger>
    </DataTemplate.Triggers>
</DataTemplate>